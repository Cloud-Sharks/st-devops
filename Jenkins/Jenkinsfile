pipeline {
    agent any
    
    tools { 
        maven 'maventest' 
    }
    
    environment{
        GIT_URL = ""
        BRANCH_NAME = ""
        ECR_URL = ""
        ECR_REPO_URL = "" 
        
    }
    
    stages {
        
        stage('clone repo') {
            //clones the repo then checkout the branch name given.
            steps {
                git "${GIT_URL}"
                bat "git checkout ${BRANCH_NAME}" 
            }
        }
        
        stage('Create core'){
            //Creates the core file and updates it.
            steps {
                bat "git submodule init"
                bat "git submodule update" 
            }
        }
        
        stage('Clean test'){
            //optional mvn clean test
            when {
                expression {
                    params.OPTIONAL_TEST == true
                }
            }
            steps {
                bat 'mvn clean test'
            }
        }
        
        stage("Package the Project") {
            steps {
                bat "mvn package -D maven.test.skip=true"
            }
        }
        
        stage("Sonarqube Quality Check") {
            
            steps{
                bat "mvn sonar:sonar"
            }
            
        }


        stage('Build'){
            //builds the project with docker
            environment {
                tag = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD").trim()
            }
            
            steps{

                

                script {
                    IMAGE_TAG = "${ECR_URL}/${ECR_REPO_URL}"
                    IMAGE_TAG_GITCOMMIT = "${ECR_URL}/${ECR_REPO_URL}:${tag}"
                }
                
                bat "docker build -t ${IMAGE_TAG} ."
                bat "docker tag ${IMAGE_TAG} ${IMAGE_TAG_GITCOMMIT}" 
            }
        }
        stage('Deploy'){
            //Pushes the image via docker
            steps {
                withAWS(credentials: 'AWS_CREDENTIALS', region: 'us-west-1') {
                     bat "aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${ECR_URL}"
                     bat "docker push ${IMAGE_TAG}"
                     bat "docker push ${IMAGE_TAG_GITCOMMIT}"
                }
            }
        }
    }
    
    post {
        always {
            bat "mvn clean"
            bat "docker rmi ${IMAGE_TAG}"
        }
    } 
    
}